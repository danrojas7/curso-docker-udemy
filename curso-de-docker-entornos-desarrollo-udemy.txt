
Instalación de docker
- https://www.docker.com/products/docker-desktop
- Para Windows y para MAC
- Es necesario registrarse en la página para descargar el instalador de docker for desktop

Linux
apt install docker

Instalar laravel
- Descargar la versión de laravel de la página https://github.com/laravel/laravel
- Se debe instalar PHP Composer en la máquina host
- ejecutar el comando dentro de la carpeta de laravel:
$ composer install

Qué es un container
- Todos los programas se instalan dentro del container de docker, para que docker ejecute dichos container
- Son completamente aislados del sistema operativo
- Pueden compartir ruta o puertos dependiendo de la configuración explícita del container

Obtener la imagen de composer
- Obtener la imagen de dockerhub, a través del comando:
$ docker pull composer

Con esto descarga la última versión de la imagen de la rama latest por defecto, a no ser que se le indique explícitamente la versión a descargar


docker run --rm -it -v "$(pwd)":/app composer composer install

docker # el comando de docker
run                 # crea un container
--rm                # cuando este container termine su ejecución, se elimina el container
-it                 # flags -tty --interactive, si no se incluyen estos comandos, no se puede ver el output
                    # de los comandos ingresados, y no se puede interactuar con el comando si solicita una entrada de parte del usuario
-v "$(pwd)":/app    # Dentro del daemon docker, se ejecutan los containers, los cuales están aislados del sistema
                    # operativo, tampoco comparten el sistema de archivos, lo que se requiere es que el directorio de
                    # laravel, se empaquete dentro del container, para esto se le debe indicar a docker, que realice
                    # en mapeo entre la ruta del sistema de archivos del sistema operativo host, con la estructura
                    # de directorios del container, una vez que el directorio de laravel se haya incluido dentro del
                    # container, se ejecuta el comando composer install, que lo que hace es leer el
                    # archivo composer.json, con todas las dependencias a instalar, como también para generar el
                    # directorio vendor, en donde van a ser instaladas
                    # Si se comprueba la línea
                    # $ echo "$(pwd)"
                    # lo que hace es mostrar la carpeta en la que está ubicado actualmente, y es la que se va a
                    # enlazar al container
-d composer         # imagen en la que se va a basar el container
composer install    # El comando que se va a ejecutar dentro del container


Descargar la imagen de docker de dokerhub
- Para iniciar un proyecto laravel en modo de desarrollo, se hace mediante el comando
$ php artisan serve
Pone en marcha un entorno local

- Es necesario un contenedor de PHP, con la última versión, mediante el siguiente comando
$ docker pull php

Instalar las dependencias de laravel con dockerfile
Luego de crear el archivo Dockerfile dentro del directorio de laravel, se procede a construir una imagen personalizada
$ docker build -t captacion-php ./

Comando para crear un container a partir de la imagen generada del Dockerfile

docker run --rm -it -p 8000:8000 -v "$(pwd)":/app captacion-php php artisan serve --host=0.0.0.0

La primera vez que se genera un error 500, es porque no se encuentra el archivo .env en el directorio de laravel, por lo que se debe crear con una configuración por defecto, y se inicia con el comando anterior el container nuevamente

Al inciarse, ahora el laravel, por la configuración del debug, ahora arroja otro error, por lo que se debe de generar un key, esto se debe de hacer con el siguiente comando:

docker run --rm -it -p 8000:8000 -v "$(pwd)":/app captacion-php php artisan key:generate

Con el comando anterior se genera una clave, y posteriormete modifica el archivo .env agregando dicha clave en base64, posteriormente se ejecuta de nuevo el comando siguiente:

docker run --rm -it -p 8000:8000 -v "$(pwd)":/app captacion-php php artisan serve --host=0.0.0.0

Con lo cual ya no arroja el error que anteriormente se presentaba.


En la página, se pueden descargar plantillas predefinidas para mostrar en nuestro servidor de aplicaciones.
https://startbootstrap.com/

Ahora se va a desarrollar una aplicación, en la cual se va a registrar un correo electrónico, y este al diligenciarse va a enviar un e-mail con la información de que el sitio está en desarrollo, y que está inscrito en el mism, con lo cual se va a almacenar en una base de datos, posteriormente se va a leer los correos electrónicos almacenados en una base de datos mysql y se va a enviar la notificación por correo electrónico de que el sitio ya se encuentra listo, para esto se va a configurar la base de datos mysql, y también se va a conectar a un servicio FakeMail para realizar el envío de correos electrónicos.

Docker compose

Al momento de iniciar los containers, es engorroso estar ingresando los comandos cada momento para iniciar el contenedor para un área de desarrollo. Para esto se docker definió un fichero de configuración llamado docker-compose.yml, este tiene una equivalencia 1 a 1 con el comando para iniciar el contenedor.

Para iniciar el contenedor, que tenga el fichero docker-compose.yml, se ejecuta mediante el siguiente comando:
$ docker-compose up

Puede que se tenga que instalar por separado en linux, el paquete que tiene las dependencias con el binario docker-compose, para esto se ingresa el siguiente comando:
$ zypper install docker-compose



version: '3'                                        # Version de docker compose
services:
    web:                                            # Puede hacer referencia con cualquier nombre al servicio,
                                                    # en este caso se llama web
        image: 'captacion-php'                      # imagen en la que se va a basar el docker compose para
                                                    # crear el container
        ports:
            - '8000:8000'                           # Mapeo de puerto local vs container
        volumes:
            - ./:/app                               # mapeo de volumenes de directorio local vs el del container
        command: php artisan serve --host=0.0.0.0   # comando que se va a ejecutar una vez se haya creado el
                                                    # container con la sentencia del docker compose

Las banderas de --rm, e -it, ya no son necesarias ya que de la gestión del container se encarga directamente el docker-compose, y la salida interactiva también, aunque un poco diferente a como se estaba presentando al ejecutar el comando manualmente dentro de la consola.

Ventajas
- Fichero descriptivo, más facil de entender el archivo, en lugar de entender un comando
- Ejemplos en docker para añadir los servicios como por ejemplo mysql
- Cualquier desarrollador se puede olvidar los comandos específicos para lanzar un container
- Se puede montar un stack completo especificando en el docker.compose.yml, en cada caso la tecnología a utilizar
- Facil de cambiar dependencias y versiones, y facil compartir y versionar el stack en repositorios de código como github

Al crear el contenedor de base de datos, se debe remitir a la documentación de la imagen oficial, para así establecer la configuración con variables de entorno, por ejemplo se le puede setear el password de root para cuando instancie el container, se pueda leer la variable de entorno del password del root, y así setearla en la base de datos.

Es importante utilizar volúmenes locales enlazados a los de los containers, ya que al momento de detener y eliminar container, se puede perder la información almancenada en la base de datos.

con la instrucción:

volumes:
        mysql-data:

En el docker-compose.yml:

version: '3'

services:
        web:
                image: 'captacion-php'
                ports:
                        - '8000:8000'
                volumes:
                        - ./:/app
                command: php artisan serve --host=0.0.0.0

        mysql:
                image: 'mysql:5.7'
                ports:
                        - '3306:3306'
                environment:
                        - MYSQL_ROOT_PASSWORD=toor
                volumes:
                        - mysql-data:/var/lib/mysql
volumes:
        mysql-data:
        
Se le puede indicar a la configuración para crear un volumen lógico, a partir de la ruta definida en la instrucción volumes del mysql, en este caso crea un volumen lógico a partir de /var/lib/mysql definido en la instrucción mysql-data de la configuración del container de mysql.

El docker-compose.yml, al ejecutar el comando docker-compose up, también automáticamente descarga las imágenes definidas

Al hacer que un container se pueda comunicar con otro container, esto se puede definir como también la cardinalidad de la relación.

mediante la instrucción en la aplicación web:

links
    - 'mysql'

Se le indica que enlace la aplicación web con la base de datos mysql.

Ahora para enlazar en la configuración web de Laravel con el motor de base de datos de MySQL correspondiente al otro componente del proyecto definido en el docker-compose.yml, se puede de hacer de las siguientes 3 maneras:
- Se puede indicar en el nombre del host en el archivo de configuración, la ip del localhost, ya que localhost a definir dentro del container (IP 127.0.0.1, ó localhost), hace autoreferencia dentro del mismo container, y no puede hacer conexión ya que el motor de MySQL está en otro container, por lo tantno no funciona.
- Se puede validar la IP del container del motor de base de datos MySQL, y se puede setear en el archivo de configuración de Laravel, sin embargo al reiniciar los containers, se encuentra que esta IP varía, por lo tanto se perdería la conexión entre el proyecto web y la base de datos, por lo tanto funcionaría, pero parcialmente.
- La última opción, es dejar a docker dns, que defina cúal debería ser la IP del container, haciendo referencia a la propiedad host dentro del archivo de configuración del Laravel, del nombre del container, en este caso 'mysql', y con  esto docker dns lo traduce a IP, logrando la conexión correcta no importando si la IP del MySQL varía en los reinicios de los containers.

Como conectar a un container?

Dentro de la carpeta del proyecto, se ejecuta el siguiente comando
$ docker-compose exec web bash

Lo que hace es conectar a una terminal bash, dentro del container

Para ejecutar los siguientes comandos
$ php artisan
$ php artisan migrate:status # comando para comprobar las migraciones
$ php artisan migrate # comando para crear las tablas necesarias de laravel directamente en la base de datos MySQL
$ exit # salir del container

Para ejecutar un comando dentro del container, sin necesidad de abrir una shell, se puede ejecutar el siguiente comando:
$ docker-compose exec web /app/artisan migrate:status

De igual manera se podría conectar al container de mysq, y ejecutar comandos dentro del mismo;
$ docker-compose exec mysql bash

Se puede conectar directamente a la base de datos mediante el siguiente comando:
$ mysql -u root -p${MYSQL_ROOT_PASSWORD} -h localhost -P 3306

O se puede hacer lo siguiente directamente:
$ docker-compose exec mysql mysql -u root -p${MYSQL_ROOT_PASSWORD} -h localhost -P 3306 -e 'show databases'
$ docker-compose exec mysql mysql -u root -p${MYSQL_ROOT_PASSWORD} -D captacion -h localhost -P 3306 -e 'select * from migrations;'


Conectarse a una consola dentro del container:
docker exec -it <mycontainer> bash


